<<<<<<< HEAD

CREATE TABLE Categories (
    CategoryID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName VARCHAR(100) NOT NULL,
=======
CREATE TABLE IF NOT EXISTS Customers (
    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
    FirstName TEXT NOT NULL,
    LastName TEXT NOT NULL,
    Email TEXT UNIQUE NOT NULL,
    Phone TEXT,
    CreatedAt TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Products (
    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
>>>>>>> 7e4b93c8b9b453fb018e6f1e348a2a4d9143b4b9
    Description TEXT,
    Price REAL NOT NULL,
    Stock INTEGER NOT NULL
);

<<<<<<< HEAD
CREATE TABLE CustomerDemographics (
    CustomerTypeID INT PRIMARY KEY,
    CustomerDesc TEXT
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CompanyName VARCHAR(100) NOT NULL,
    ContactName VARCHAR(100),
    ContactTitle VARCHAR(100),
    Address VARCHAR(255),
    City VARCHAR(100),
    Region VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100),
    Phone VARCHAR(30),
    Fax VARCHAR(30)
);

CREATE TABLE CustomerCustomerDemo (
    CustomerID INT,
    CustomerTypeID INT,
    PRIMARY KEY (CustomerID, CustomerTypeID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (CustomerTypeID) REFERENCES CustomerDemographics(CustomerTypeID)
);

CREATE TABLE Employees (
    EmployeeID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LastName VARCHAR(100),
    FirstName VARCHAR(100),
    Title VARCHAR(100),
    TitleOfCourtesy VARCHAR(100),
    BirthDate DATE,
    HireDate DATE,
    Address VARCHAR(255),
    City VARCHAR(100),
    Region VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100),
    HomePhone VARCHAR(30),
    Extension VARCHAR(10),
    Photo BYTEA,
    Notes TEXT,
    ReportsTo INT,
    PhotoPath VARCHAR(255),
    FOREIGN KEY (ReportsTo) REFERENCES Employees(EmployeeID)
);


CREATE TABLE Regions (
    RegionID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RegionDescription VARCHAR(100)
);

CREATE TABLE Territories (
    TerritoryID INT PRIMARY KEY,
    TerritoryDescription VARCHAR(100),
    RegionID INT,
    FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)
);

CREATE TABLE EmployeeTerritories (
    EmployeeID INT,
    TerritoryID INT,
    PRIMARY KEY (EmployeeID, TerritoryID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (TerritoryID) REFERENCES Territories(TerritoryID)
);

CREATE TABLE Shippers (
    ShipperID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CompanyName VARCHAR(100),
    Phone VARCHAR(30)
);

CREATE TABLE Suppliers (
    SupplierID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CompanyName VARCHAR(100),
    ContactName VARCHAR(100),
    ContactTitle VARCHAR(100),
    Address VARCHAR(255),
    City VARCHAR(100),
    Region VARCHAR(100),
    PostalCode VARCHAR(20),
    Country VARCHAR(100),
    Phone VARCHAR(30),
    Fax VARCHAR(30),
    HomePage TEXT
);

CREATE TABLE Products (
    ProductID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR(100),
    SupplierID INT,
    CategoryID INT,
    QuantityPerUnit VARCHAR(50),
    UnitPrice NUMERIC(10, 2),
    UnitsInStock INT,
    UnitsOnOrder INT,
    ReorderLevel INT,
    Discontinued BOOLEAN,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

CREATE TABLE Orders (
    OrderID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID INT,
    EmployeeID INT,
    OrderDate TIMESTAMP,
    RequiredDate TIMESTAMP,
    ShippedDate TIMESTAMP,
    ShipVia INT,
    Freight NUMERIC(10, 2),
    ShipName VARCHAR(100),
    ShipAddress VARCHAR(255),
    ShipCity VARCHAR(100),
    ShipRegion VARCHAR(100),
    ShipPostalCode VARCHAR(20),
    ShipCountry VARCHAR(100),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ShipVia) REFERENCES Shippers(ShipperID)
);

CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    UnitPrice NUMERIC(10, 2),
    Quantity INT,
    Discount REAL,
    PRIMARY KEY (OrderID, ProductID),
=======
CREATE TABLE IF NOT EXISTS Categories (
    CategoryID INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
    Description TEXT
);

CREATE TABLE IF NOT EXISTS ProductCategories (
    ProductID INTEGER,
    CategoryID INTEGER,
    PRIMARY KEY (ProductID, CategoryID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

CREATE TABLE IF NOT EXISTS Orders (
    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,
    CustomerID INTEGER,
    Status TEXT NOT NULL,
    TotalAmount REAL,
    CreatedAt TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE IF NOT EXISTS OrderItems (
    OrderItemID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER,
    ProductID INTEGER,
    Quantity INTEGER NOT NULL,
    UnitPrice REAL NOT NULL,
>>>>>>> 7e4b93c8b9b453fb018e6f1e348a2a4d9143b4b9
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

CREATE TABLE IF NOT EXISTS Employees (
    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,
    FirstName TEXT NOT NULL,
    LastName TEXT NOT NULL,
    Email TEXT UNIQUE,
    Position TEXT
);

CREATE TABLE IF NOT EXISTS Shippers (
    ShipperID INTEGER PRIMARY KEY AUTOINCREMENT,
    CompanyName TEXT NOT NULL,
    Phone TEXT
);

CREATE TABLE IF NOT EXISTS Shipments (
    ShipmentID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER,
    ShipperID INTEGER,
    ShippedDate TEXT,
    TrackingNumber TEXT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID)
);

CREATE TABLE IF NOT EXISTS Payments (
    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER,
    PaymentDate TEXT DEFAULT CURRENT_TIMESTAMP,
    Amount REAL,
    Method TEXT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);